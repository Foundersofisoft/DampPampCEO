from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from core.bybit_api import get_candles
from core.indicators import calculate_indicators
from core.strategy import generate_signal
from telegram_bot.notifier import send_message
from config import TELEGRAM_TOKEN
import pytz
from datetime import datetime

TIMEZONE = pytz.timezone("Asia/Almaty")

# —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
COINS = {
    "BTC/USDT": "‚Çø BTC",
    "ETH/USDT": "Œû ETH",
    "ATOM/USDT": "‚öõ ATOM",
    "BNB/USDT": "üü° BNB",
    "SOL/USDT": "üåû SOL",
    "XRP/USDT": "üí† XRP",
    "ADA/USDT": "üî∑ ADA",
    "DOGE/USDT": "üê∂ DOGE",
    "DOT/USDT": "üéØ DOT",
    "MATIC/USDT": "üî∫ MATIC",
    "ARB/USDT": "üåÄ ARB",   # üëà –î–æ–±–∞–≤–∏–ª–∏ Arbitrum
}

# —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
TIMEFRAMES = {
    "5m": "‚è± 5m",
    "15m": "‚è± 15m",
    "1h": "üïí 1h",
    "4h": "üïì 4h",
}

# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–Ω–µ—Ç
def get_main_menu():
    keyboard = [[InlineKeyboardButton(f"{emoji}", callback_data=f"coin|{symbol}")] for symbol, emoji in COINS.items()]
    return InlineKeyboardMarkup(keyboard)

# –º–µ–Ω—é —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
def get_tf_menu(symbol):
    keyboard = [[InlineKeyboardButton(f"{emoji}", callback_data=f"tf|{symbol}|{tf}")]
                for tf, emoji in TIMEFRAMES.items()]
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(keyboard)

# –∫–æ–º–∞–Ω–¥–∞ /signals
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_main_menu())

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("|")

    # –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–æ–Ω–µ—Ç
    if query.data == "back":
        await query.edit_message_text("üìä –í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_main_menu())
        return

    # –≤—ã–±–æ—Ä –º–æ–Ω–µ—Ç—ã
    if data[0] == "coin":
        symbol = data[1]
        await query.edit_message_text(f"‚è± –í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è {symbol}:", reply_markup=get_tf_menu(symbol))
        return

    # –≤—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    if data[0] == "tf":
        symbol = data[1]
        tf = data[2]
        candles = get_candles(symbol=symbol, timeframe=tf)
        indicators = calculate_indicators(candles)
        signal = generate_signal(indicators, symbol, tf)

        back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")]])
        await query.edit_message_text(text=signal, reply_markup=back_button, parse_mode="Markdown")
        return

# –∞–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã (–ø–æ 15m)
def auto_job():
    results = []
    for symbol in COINS.keys():
        candles = get_candles(symbol=symbol, timeframe="15m")
        indicators = calculate_indicators(candles)
        results.append(generate_signal(indicators, symbol, "15m"))

    time_now = datetime.now(TIMEZONE).strftime("%H:%M %d-%m-%Y")
    message = f"üì¢ *–ê–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã ({time_now})*\n\n" + "\n".join(results)
    send_message(message)

def run_bot():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("signals", start))
    app.add_handler(CallbackQueryHandler(button))

    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    scheduler.add_job(auto_job, "interval", minutes=15)
    scheduler.start()

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Bybit). –ò—Å–ø–æ–ª—å–∑—É–π /signals –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Ä—É—á–Ω—É—é.")
    app.run_polling()
